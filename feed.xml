<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Hacking to the Gate</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://hacker-yhj.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://hacker-yhj.github.io" />
<updated>2015-04-10T07:49:46+00:00</updated>
<id>http://hacker-yhj.github.io/</id>
<author>
  <name>Thomas Yang</name>
  <uri>http://hacker-yhj.github.io/</uri>
  <email>jscnm1993@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Koans Games]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/Koans-Games/" />
  <id>http://hacker-yhj.github.io/Koans-Games</id>
  <published>2014-05-12T00:00:00+00:00</published>
  <updated>2014-05-12T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;For anyone who already had some programming experience and wants to play with Ruby but somehow impeded by, or just fail to find any logics but coarse information in the so called Ruby Handbook, Koans may be a amazing alternative for you to try.&lt;/p&gt;

&lt;p&gt;I’m always wandering that, as a dynamic and reflective programming language, Ruby is fully capable to explains itself clearly, without any chunky handbook. Ruby is designed for programmer productivity and fun, and with this purpose it’s syntaxs and method names are meticulously considered to be intuitive, showing the similar form of nature language, which thousands of elegant Ruby one liners assured. I’m gonna show you an example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# to make every word in a paragraph capitalized&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@paragraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# a shorter and more skillful approach&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@paragraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\S+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From my perspective, instigating somebody to reading the alleged Ruby Handbook is ruining the language, as Jim Weirich and Joe O’Brien, the author of Koans, may agree with. However, they didn’t just hold this point of view, but ultimately build up this helper, which earned my respect spontaneously.&lt;/p&gt;

&lt;p&gt;So, if I’ve already attracted your attending, and you are ready for this journey. Then follow me, I’ll point out a path to enlightenment that leading you to cross the Gate of Ruby and witness it’s inner beauty.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;preparation&quot;&gt;Preparation&lt;/h1&gt;

&lt;p&gt;To start our journey, we must assume that all the equipment assured. This time, we only need two, Ruby interpreter and Rake. If you do not already have Ruby setup, please visit &lt;a href=&quot;http://ruby-lang.org/en/downloads&quot;&gt;http://ruby-lang.org/en/downloads&lt;/a&gt; for operating system specific instructions. For Rake, visit &lt;a href=&quot;https://rubygems.org/&quot;&gt;https://rubygems.org/&lt;/a&gt; to get gems, the Ruby’s premier packaging system, and type &lt;code&gt;gem install rake&lt;/code&gt; in your console.&lt;/p&gt;

&lt;p&gt;And please make sure the version of your Ruby is greater than 1.8. To look up your Ruby version, please type &lt;code&gt;ruby --version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When everything are ready, please visit &lt;a href=&quot;http://rubykoans.com/&quot;&gt;http://rubykoans.com/&lt;/a&gt; and get the Koans. Usually you will have a compressed package downloaded, decompress it and enter the target folder. See the list of .rb files? Those are where we will visit later. But don’t be hurry, we need a experienced guide introduce us all the resorts. type &lt;code&gt;rake&lt;/code&gt; in your console and see what will hapen.&lt;/p&gt;

&lt;h1 id=&quot;first-try&quot;&gt;First try&lt;/h1&gt;

&lt;p&gt;If everything goes right, you will get the following output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; /YourRubyPath/ruby path_to_enlightenment.rb
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; AboutAsserts#test_assert_truth has damaged your karma.
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; The Master says:
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;   You have not yet reached enlightenment.
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; The answers you seek...
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   Failed assertion.
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; Please meditate on the following code:
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;   /Path/To/koans/about_asserts.rb:10:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_assert_truth&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; mountains are merely mountains
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; your path thus far &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;X_________________________________________________&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 0/282&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you may noticed, the &lt;code&gt;0/282&lt;/code&gt; is your progress, which indicating how many tests you have passed among all. And where to start? &lt;code&gt;/Path/To/koans/about_asserts.rb:10&lt;/code&gt; is leading you the way. Open the file and you will see the code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We shall contemplate truth by testing reality, via asserts.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_assert_truth&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# This should be true&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our journey is made up of several pieces of test, defined as a method whose name starts with ‘test’. The path to enlightenment is filled with such tests and we need to pass them one by one.&lt;/p&gt;

&lt;p&gt;For the first test, we encounter the &lt;code&gt;assert&lt;/code&gt; method, which have the same meaning as it in any other languages. We have to pass a &lt;code&gt;true&lt;/code&gt; to it to pass it. So change the &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, save the file and type &lt;code&gt;rake&lt;/code&gt; again. You will see your progress in the output. BTW, &lt;code&gt;assert&lt;/code&gt; is not a Ruby intrinsic method, it is defined in &lt;code&gt;neo.rb&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;All the tests are carefully designed to cover major syntaxs and conventions in Ruby. Some simply need to have the correct answer substituted for an incorrect one. Some, however, require you to supply your own answer. If you see the method __ (a double underscore) listed, it is a hint to you to supply your own code in order to make it work correctly.&lt;/p&gt;

&lt;h1 id=&quot;more-in-depth&quot;&gt;More In-depth&lt;/h1&gt;

&lt;p&gt;Passed all the test with Ruby’s magic still lingering in your head? You may 
wanna see more about Koans and it’s magic. Open the file &lt;code&gt;neo.rb&lt;/code&gt;, and enjoy it.&lt;/p&gt;

&lt;p&gt;In this file, all the test mechanism are clearly defined. You can find everything you need to explain Koans, about how it call all the methods started with ‘test’, about how it avoided printing the same progress information twice, about the magic word ‘FILL ME IN’ as you may have been encounted. And what more, once you know it, you can have your own. &lt;/p&gt;

&lt;p&gt;If you encountered some problems, you may want to take a look at &lt;a href=&quot;http://rubykoans.com/&quot;&gt;http://rubykoans.com/&lt;/a&gt; – the official site of Koans. Please feel free to contact me too. I’ll be glad to give out an answer for you.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/Koans-Games/&quot;&gt;Koans Games&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on May 12, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[About VIM and It’s Philosophy]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/About-Vim/" />
  <id>http://hacker-yhj.github.io/About-Vim</id>
  <published>2014-05-01T00:00:00+00:00</published>
  <updated>2014-05-01T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;搭好博客之后，才觉得腾出时间来写点博客有多不容易。说好的对GTD的第二次总结迟迟没有结果，VisualMath的计划还根本就看不到影子，而自己的精力感觉已经油尽灯枯了。请容我惯例掀一下桌子。&lt;/p&gt;

&lt;p&gt;( ╯#-_-)╯┻━┻&lt;/p&gt;

&lt;p&gt;好了，言归正传。&lt;/p&gt;

&lt;p&gt;很早就想写一点关于VIM的文章，也算是整理一下自己的使用心得。由于沉迷VIM邪教已久，现在早已不能自拔，丧心病狂的把各种IDE，甚至Chrome上都装上了VIM插件，偶尔用Pages写个报告都会习惯性打几个 &lt;code&gt;:w&lt;/code&gt; 。有时候想想，因为接触到了VIM，在磕磕碰碰的使用的过程中，莫名其妙的了解到了最初的计算机文化，了解到了一群神人所创造的，隐藏在黑底白字中的典藏，岂不美哉。&lt;/p&gt;

&lt;p&gt;接触VIM还是学习ICS的时候，为了避免一遍又一遍的上传代码到远端服务器，狠下心来直接在上面打开了VIM。然后对照着网上的各种教程，以大概每十秒钟一个误操作的速度，写好了第一个ICS的Lab。而现在，前前后后用VIM也大概有一年半了，现在渐渐对非VIM的编辑方式感到了不习惯。感觉隐隐约约触碰到了VIM哲学的本质，斗胆一试，希望能够通过文字表达出来。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;section-1&quot;&gt;关于本文&lt;/h1&gt;

&lt;p&gt;我先说好，本文不是教程，不是21天学会VIM，不是从零单排，这就是一篇用过VIM的人写下的一点感想而已。想要教程的话，出门左转Google一搜一大片。&lt;/p&gt;

&lt;p&gt;我只用过VIM这一种高级文本编辑器，emacs等等我都没有用过。因此我不会妄加比较，不会，也尽量不显得带任何攻击色彩。&lt;/p&gt;

&lt;p&gt;我大概是一个工具主义者而非完美主义者，任何能够提高效率的东西我都有兴趣推荐给大家，VIM也不例外。而VIM作为一款纯文本编辑器，对开发者来说未免略显无力。以目前的开发规模，离开称手的IDE开发，实际上得不偿失。事实上，我所指的VIM，是指的VIM的文本编辑方法，并不局限于VIM这一个行编辑器。我个人就在各种IDE上使用VIM插件来获得基本上相同的体验，我也并不推荐使用纯VIM来作为主要的工作环境。当然，你可以用它来练习。&lt;/p&gt;

&lt;p&gt;最后我想说，我不是一个职业开发者，我还只是个大学生，而一年半的使用经验也不是很拿得出手。我只是希望通过写下Post，增强一下我对此的体会，欢迎任何形式的留言和建议。&lt;/p&gt;

&lt;h1 id=&quot;vim&quot;&gt;VIM简介&lt;/h1&gt;

&lt;p&gt;VIM是一款非常适合开发者使用的命令行文本编辑器，在程序员中被广泛使用，和Emacs并列成为类Unix系统用户最喜欢的编辑器。其热门程度之高，直接集成进了所有类Unix系统中，用户能够直接在命令行打开。其对现代编辑器的影响也不容小觑，基本上每一个IDE都能够找到VIM的Plugin，现在很多人青睐的Sublime Text，也自带了VIM模式，可见一斑。windows用户想一试的话，也可以去google一下gVIM，这是一个带GUI的VIM。&lt;/p&gt;

&lt;p&gt;需要澄清的是，网络上大部分教程都把VIM描述成了一个学习曲线陡峭的怪物，无端的创造了一个令人望而生畏的印象，而我认为这样的行为是十分愚蠢的。除去过分炫耀带来的自我满足，事实上，这样的夸大其词无意间扼杀了很多潜在用户。我相信大多数人是充满好奇心并且好学的，而且我也相信，VIM给你带来的趣味远比其学习曲线带来的阻碍要大得多。&lt;/p&gt;

&lt;p&gt;因此，你现在就可以体会一下，打开Terminal，输入vim，盯着屏幕上的欢迎信息，并且告诉自己这就是让无数人欲罢不能的编辑器 — VIM。&lt;/p&gt;

&lt;h1 id=&quot;vim-1&quot;&gt;VIM的特点&lt;/h1&gt;

&lt;p&gt;说到VIM的特点，就不得不先扯一下最近对代码编辑的新想法了。最近发现自己编写代码的速度大打折扣，最主要的原因，我想应该是要实现的逻辑越来越复杂。这里的逻辑，并非是单纯考虑算法的逻辑，而是考虑到了很多其他因素，网页App的屏幕适应性，多浏览器支持；android下线程的通信，以及不同厂商实现之间细微但坑爹的差异；各种设计时考虑的不周全引起的代码重构。于是比起当年怒刷POJ时的码字速度，自然慢了许多。&lt;/p&gt;

&lt;p&gt;但是，某一天我脑洞大开，后知后觉的发现有无论怎么码字，始终是两个过程 —— &lt;strong&gt;编写&lt;/strong&gt; 和 &lt;strong&gt;修改&lt;/strong&gt; 组成的。&lt;/p&gt;

&lt;p&gt;听起来着实像是废话！不过听我接着讲。我所说的 &lt;strong&gt;编写&lt;/strong&gt; 的过程，更像是对照着文档，UML，或是其他已经组织好的内容，用代码语言将其描述出来的过程。典型的例子是做POJ题目时，某一题正好可以用你熟知的某一个算法解出。你在编码时可以感受到行云流水的畅快和飞一般的速度。这个过程，我大胆猜测，在大脑中是线性处理的。大脑不断把缓冲区中的信息翻译成代码，指挥你的手完成输入。由于不需要考虑上下文，只需要根据之前定好的逻辑走，可以将速度提得非常快。&lt;/p&gt;

&lt;p&gt;而 &lt;strong&gt;修改&lt;/strong&gt; 的过程，我认为，较之编写，是一种更加凌乱，毫无顺序，并且需要更多灵光一现的过程。典型的例子是调试，需要不断的审视全文，梳理思路，并且将集中力聚焦到不同的点上。这一个过程，我再大胆猜测，在大脑中是并行的。因为在这个过程中，尚没有找到一个清晰的解决方法，大脑会尝试所有念头和思路，但是你执行的速度远比不上大脑的速度，因此可能会漏掉很多。&lt;/p&gt;

&lt;p&gt;最后我再大胆猜测，在这两种过程中切换，应该会有一定的代价（就像进程切换一样）。我回想起最开始写代码的时候，经常在能运行的版本还没写好的时候，因为想到了某些细枝末节，跳回到前面修改某些代码，再继续的时候就会花好些时间整理思路。有没有什么行之有效的方法，尽量减少这种切换呢？当然，写代码前做好详细的设计是根本，直接开始编码是最愚蠢的行为。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The sooner you start to code, the longer your program will take.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;事实上，我们已经在使用某种类似方法来提高我们的效率了，简单的来说，就是心理暗示。我们希望集中精力完成某一件事情，就将其与某一个外部状态绑定起来，并且暗示自己，该状态存在的时候，我希望自己能够全力以赴的完成该事情。举个例子，很多人上自习喜欢去教室，实际上由于长期在教室学习，对自己说“教室是学习的地方”，久而久之适应了这样一种暗示，因此会觉得在教室学习效率会高。同理，每个人都会或多或少有一些癖好，或多或少都是潜意识希望提高集中力而形成的。&lt;/p&gt;

&lt;p&gt;以上均为我的胡思乱想。&lt;/p&gt;

&lt;p&gt;然后，终于要说到点子了。我们来看VIM是怎么帮助我们提高效率的。&lt;/p&gt;

&lt;p&gt;VIM虽然功能繁多，但基本上都是建立在各种不同的模式上的。其中，插入模式对应的是普通的编辑器。这个模式下，会将键盘输入的字符插入到光标之后，给用户以键入字符的反馈。这无需多讲。而VIM的精髓是普通模式，也是其默认模式。其行为跟我们常用的编辑器大相径庭。打个比方，在普通模式下按键的效果，就像一般编辑器按住control或者alt之后再按键的效果一样，其作用并不是输入相应字符，而是执行某些功能。模式之间切换异常方便，这也是使用VIM的基本要素。&lt;/p&gt;

&lt;p&gt;我使用VIM的方式是，我在 &lt;strong&gt;编写&lt;/strong&gt; 的时候，尽量保持在插入模式，保证输入的质量，一气呵成。而在 &lt;strong&gt;修改&lt;/strong&gt; 的时候，尽量保持在普通模式，即使需要修改某些内容，进入插入模式修改完毕后，也立刻退出到普通模式。&lt;/p&gt;

&lt;p&gt;编写时需要的是清晰的思路和快速且正确的键入，这就要求良好的打字基本功。我觉得，这对程序员来说，应该是必须锻炼的技能。曾经看到过得一篇Blog写的相当有理，里面提到程序员需要良好的打字基础，是因为你的手需要尽可能跟上你思维的速度。说到这儿，不得不提到一个良心网站&lt;a href=&quot;http://typing.io/&quot;&gt;Typing&lt;/a&gt;，里面有各种语言的经典源码供typing练习。&lt;/p&gt;

&lt;p&gt;而修改时，如果我的假设正确，即在这一过程各种不同的思路和想法都会在大脑中，从而一团乱麻。那手随心动，以最快的速度处理刚刚出现的念头就更显得重要了。这个时候，我就想提到鼠标这个万恶之源。鼠标绝对是拖慢我们动作的首要设备，想想你需要多长的一段时间才能用鼠标做一个简单的Copy&amp;amp;Paste。而VIM的强大，在这个时候才开始崭露头角。&lt;/p&gt;

&lt;p&gt;VIM的普通模式下功能之强大，可以用简单的键盘操作完成各种复杂的功能。举个例子，保存，可以使用之前提到的&lt;code&gt;:w&lt;/code&gt;来实现；交换上下两行位置，&lt;code&gt;ddp&lt;/code&gt;即可；如果你需要将本行之后的所有”public“替换为”private”，使用&lt;code&gt;:.,$s/public/private/g&lt;/code&gt;即可。看起来稍显复杂，我稍微解释一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.,$ 当前行直到最后一行&lt;/li&gt;
  &lt;li&gt;s Substitute 替换&lt;/li&gt;
  &lt;li&gt;public 源字符串&lt;/li&gt;
  &lt;li&gt;private 目标字符串&lt;/li&gt;
  &lt;li&gt;g Global，全局替换&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;会不会有一种这本身就是一个句子的感觉？VIM制定了一套奇怪的语言，但是当你稍加了解之后，就可以用这种语言发号施令，调遣三军，直取敌营。相比传统的无语义的快捷键，VIM学习起来还颇有趣味。我感觉这也是VIM设计之初考虑到的，其目的就是要尽可能帮助你手随心动，再配合数量的操作，达到一种思维和文本同步的境界。如果说把这一年半所有的手法和键位都忘掉，我想这一段感悟应该是我剩下的最有价值的东西了。&lt;/p&gt;

&lt;h1 id=&quot;vim-2&quot;&gt;VIM带给我的&lt;/h1&gt;

&lt;p&gt;好像乱七八糟扯了一大通，做一个小小的总结吧。&lt;/p&gt;

&lt;p&gt;作为一个开发者，如果不想淘汰掉，我想，学习这件事情应该是伴随终生的。而对于大学之后的学习，应该融入更多的思考和反省。我觉得，使用VIM的过程中，它迫使我做出了相当的思考。不仅是在学习其使用方法方面，还在于其设计时的理念和哲学。虽然感觉扯淡成分也不少，但是得出了一个自己还满意的答案。&lt;/p&gt;

&lt;p&gt;近段时间接触到了好多古老而成熟的技术，感觉越是接近，越能感觉到当年那一群人的热血和激情与自己的无知和自大。还是自己的姿势水平不够啊（要时刻谨记长者教诲）。每次接触到新的技术，都能获得焕然一新的感受和更开阔的眼光，这也是支持我不停充电的最重要的原因。&lt;/p&gt;

&lt;p&gt;再引一句话作为结尾吧：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Man’s mind, once stretched by a new idea, never regains its original dimensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;:wq&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/About-Vim/&quot;&gt;About VIM and It’s Philosophy&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on May 01, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Nachos Notes -- Preparations]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/operation-system-Lab-0/" />
  <id>http://hacker-yhj.github.io/operation-system-Lab-0</id>
  <published>2014-02-25T00:00:00+00:00</published>
  <updated>2014-02-25T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;makefile-&quot;&gt;Makefile 规则&lt;/h1&gt;

&lt;p&gt;首先推荐一个非常好的资源&lt;a href=&quot;http://hacker-yhj.github.io/resources/gun_make.pdf&quot;&gt;GNU make中文手册&lt;/a&gt;，上面的讲解非常详细，已经超出了理解Nachos系统Makefile的需求。&lt;/p&gt;

&lt;p&gt;make是构建和管理工程的非常便利的工具，使用Makefile作为自己的配置文件，在合理配置的条件下，能够实现自动化编译，因此，也成为Linux程序员的必修课。作为配置文件，Makefile中必须包括所有描述工程链接，编译甚至清理工作的详细解释。学习Makefile的语法，可以说是使用make工具的基础，也是重点。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Makefile的基本结构很简单，可以说是数个称作“规则”的句式组成的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;目标… : 依赖…
  指令…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目标是一个名字，目的只是给后面的依赖以及指令一个标识，在命令行能够使用&lt;code&gt;make your_target&lt;/code&gt;这样的语法执行一个特定的目标中的内容。默认的&lt;code&gt;make&lt;/code&gt;则总是执行第一个目标。&lt;/p&gt;

&lt;p&gt;依赖是通常是一个或者多个文件，也可能是另一个目标，用空格隔开。他们指的是实现目标需要哪些文件，如果没有，则递归寻找或编译之。依赖中可以使用通配符。&lt;/p&gt;

&lt;p&gt;指令是当依赖满足是，需要执行的bash指令。一般来说都是带参数的编译，链接，清理文件，输出Log到控制台等等。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;有两个地方值得注意&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;其一是当依赖的文件数量过多时，可以用反斜杠&lt;code&gt;\&lt;/code&gt;另起一行，但&lt;code&gt;\&lt;/code&gt;后不能有空格。&lt;/p&gt;

&lt;p&gt;其二是指令必须使用[Tab]随进一格。&lt;/p&gt;

&lt;p&gt;make工具默认带有编译功能，当一个.o文件列入依赖中时，make会自动寻找是否有同名的另一个目标，如果没有则默认使用同名的.c文件和其所依赖的.h文件编译之。但如果需要复杂参数的编译，仍需自己手写指令。&lt;/p&gt;

&lt;p&gt;Makefile中的&lt;code&gt;include&lt;/code&gt;语句与C语言类似，直接将所包含文件原封不动的读入后继续解析。这为复杂Makefile的多文件组织提供了很好的支持。&lt;/p&gt;

&lt;p&gt;Makefile同样支持变量语法。&lt;/p&gt;

&lt;p&gt;变量的定义如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;变量1：文件1 文件2 $(变量2) …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;变量类似C语言中的宏变量，直接进行字符串替换。使用时需在变量周围加上表示，以便与一般字符串区别&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$(变量1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nachos Makefile中使用到的语法和规则大概就是以上了。&lt;/p&gt;

&lt;h1 id=&quot;nachos--makefile-&quot;&gt;Nachos 的 Makefile 结构&lt;/h1&gt;

&lt;p&gt;根目录下的Makefile中并没有什么难懂的内容，all目标递归的对子文件夹调用make，clean目标则顾名思义，print目标打印出所有的文件。&lt;/p&gt;

&lt;p&gt;根目录下还有Makefile.common和Makefile.dep两个文件，被子文件夹中的Makefile引用。各级目录的Makefile看似很长，事实上都是利用指令生成的，注意看根目录Makfile下调用make的方式，&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; depend
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; nachos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中depend阶段就是在生成该目录下的Makefile。具体如何生成的，再Makefile.commom下的depend任务中写的很详细。&lt;/p&gt;

&lt;p&gt;Makefile.common中有较多的gcc编译参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-E 表示只运行预编译，一般需要将结果重定向到另一个文件中。&lt;/li&gt;
  &lt;li&gt;-g 表示生成一些调试信息。&lt;/li&gt;
  &lt;li&gt;-Wshadow 当局部变量遮蔽(shadow)了参数、全局变量或者是其他局部变量时，该警告选项会给我们以警告信息。&lt;/li&gt;
  &lt;li&gt;-Wall 开启警告。注意这里的all所有并不包含所有警告，它只包含：-Wuninitialized -Wunused -Wswitch -Wsequence-point -Wparentheses -Wmissing-braces -Wimplicit -Wformat -Wcomment -Wchar-subscripts&lt;/li&gt;
  &lt;li&gt;-fwritable-strings 将string存储为可写数据。&lt;/li&gt;
  &lt;li&gt;-M 自动为.c文件加入.h共同编译。&lt;/li&gt;
  &lt;li&gt;-I 手动添加编译路径。&lt;/li&gt;
  &lt;li&gt;-P 禁用 -E 中的行数标号。
还有一些参数没弄明白意思，手册上也没发现，先挖个坑吧。注意到文件中的&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;CPP= gcc -E&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里的CPP显然就不是C-Plus-Plus而是C-PreProcessing了。&lt;/p&gt;

&lt;p&gt;各级Makefile中用到了不少32位linux特有的库函数，对Ubuntu Desktop用户来说，有些可能并不是安装自带的。如果没有相关依赖，可以输入指令&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install build-essential
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install g++&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安装完这两个包之后，就可以正常编译了。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/operation-system-Lab-0/&quot;&gt;Nachos Notes -- Preparations&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on February 25, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GTD - The First Impression]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/GTD-First-Impression/" />
  <id>http://hacker-yhj.github.io/GTD-First-Impression</id>
  <published>2014-01-27T00:00:00+00:00</published>
  <updated>2014-01-27T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;最近读了David Allen所著的&amp;lt;Getting Things Done, The Art of Stress-Free Productivity&amp;gt;，其中提到的GTD理论，我个人感觉受到了相当的启发。在网上一看，才发现已经有了相当大量的人在研究和按照自己的节奏部署和执行这样一套理论。&lt;/p&gt;

&lt;p&gt;想到自己现阶段的处境，感觉离工作也不远了，正好也是寒假，了解一下也不是坏事儿（ (╯‵□′)╯︵┻━┻你丫又忘了你的GRE了吗？ ）。退一步说，以一个大学生的角度来说，尤其是我这种整天不知道在干什么的人，了解一下GTD对提高自己的效率也可能会有些帮助。&lt;/p&gt;

&lt;p&gt;由于内容很大，再加上我自己也是一知半解，因此我决定按照学习的进度，大概写4篇关于GTD的Post，这是第一篇，主要总结一下GTD理论及其目的。后面的Post可能会包含部署和实践的方法，具体工具的使用体会，根据自身不同的情况做出不同的调节等等。不过要看学习的进度了。&lt;/p&gt;

&lt;p&gt;嘛，╮(╯▽╰)╭，以下内容均为个人意见，欢迎留言拍脸。&lt;/p&gt;

&lt;h2 id=&quot;why-gtd&quot;&gt;Why GTD&lt;/h2&gt;

&lt;p&gt;首先要说的是GTD存在的理由，为什么我们需要这样一个理论来引导我们完成事务？简单来说就是:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们需要做的事情太多了，以至于影响到了我们正在做的事情。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;说的有些笼统，我们不妨举一个例子。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;试想我正在读一个英文文档，原因是我在写一个小项目的时候忘记了一个特定的API。我一边翻阅文档，一边google这个api的典型用法。我在google的结果中找到了一段十分经典的代码，它虽然没有解决我当下的问题，但是对提升我之前一个项目的性能至关重要，我打开把该页加入书签目录中，并写下一大段描述性文字来提醒自己；翻阅文档的过程中，我看到了一个陌生的单词，考虑到不久后的GRE考试，我打开online entomology，搜索了这个词，了解了它与同源词的关系，并将其加入我的单词本中；文档中提到了一个未修复的Bug，我似乎用到了这一段代码，我需要回头去看看是否踩中了这个陷阱；哎呀好累，刷一下微博吧，赞赞赞蜡烛蜡烛蜡烛……&lt;/p&gt;

&lt;p&gt;这看起来像是开小差，但不仅仅是开小差。所谓的开小差是自知的，你可能就在当时就已经意识到自己没有在工作，比如刷微博；而对于上述的其他动作，我可能会否认自己在开小差，因为我的确完成了某些事情（增加了一大堆“需要完成的事情”），即使对我正在进行的工作没有任何帮助。这样的行为使得我的整个行动极其低效。&lt;/p&gt;

&lt;p&gt;反观当下严峻的情况，工作不再有清楚的界限，几乎每一件事情都可能处理得更加完善。人们对自己做出的承诺或者承诺的义务不明确，导致了他们承受着种种压力的折磨。随着大脑再处理问题和管理问题上的不断切换，效率不知不觉间变得极其低下。引用书中的一句话稍作总结吧：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人们的生活质量得到了显著的提高，但是同时又承担着自己理所不能及的工作，结果导致他们承受了越来越大的压力。这似乎是眼高手低造成的，而且绝大多数人都对怎样改善这种局面感到茫然。我们所工作的机构似乎处于一种永恒的变化之中，而我们自身还没有具备相应的能力来承担和调整来自于我们内心和外界环境的一切。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到这里，刚刚过去的几分钟里，你是不是已经走神了？脑子里冒出一些与你现在阅读的内容毫不相干的事情了呢？&lt;/p&gt;

&lt;h2 id=&quot;what-is-gtd&quot;&gt;What is GTD&lt;/h2&gt;

&lt;p&gt;GTD，简单来说就是为了将我们从上述困境中解放出来而存在的一种行为管理的方法。其理论依据是理解自己的大脑是如何工作，并对症下药。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;大脑中盘踞问题的多少与其解决的效率成反比。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多研究都表明，多线程的思考方式不适合人类，想起和忘掉的过程异常浪费精力。然而事务往往并不是线性的，这就导致了上述冲突，也就间接导致了效率底下。GTD所希望提供这样一种手段，使得所有的事务在我们的管理下，尽可能的线性化。（我觉得我跑偏了╮(╯▽╰)╭）&lt;/p&gt;

&lt;p&gt;GTD的主要途径如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;抓住所有一切需要处理的事情（现在的、以后的、将来某时的；大的、小的、或者不大不小的）把它们统统置入一个脱离大脑的逻辑系统中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;训练自己在接受一切“输入信息”的前期作出决定。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一点的意思就是将执行事务和管理事务分离。（我想起了，策略与机制相分离，喂，又跑题了！）这是一个很直观的概念，即是保证我们的工作效率不因为突如其来的事务而降低，这一点，作为程序员，我又很深刻的体会。简单来说，需要长时间集中精力的工作都有一个预热期，过了这个时间之后，才能保持高效率；无端的打断则会导致重新花费时间度过预热期，这是十分难以接受的。&lt;/p&gt;

&lt;p&gt;第二点的意思即是，虽说执行与管理分离，但是没有这样一个全知全能的辅助来帮我们管理，因此我们需要在突发事件来临的前期，用最少的精力对其进行最有利的管理。比如说我正在写项目，老板突然叫我去开会，这就是“输入信息”，我瞟了一眼就没理他，这就是前期决定。当然，很多时候这不是一个好的决定。&lt;/p&gt;

&lt;p&gt;同样引用书中很精辟的话作为总结：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;任何没有找到应有的位置和恰当的存在方式的事务，都会盘踞在我们的脑海中称为悬而未决的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;事情极少由于时间匮乏而受阻。他们陷入困境往往是由于未能判定行动而造成的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;综上就是GTD最直白的描述了，比较空泛，毕竟我也接触不久。随着更深的了解，我也跟进更详细的体会的。&lt;/p&gt;

&lt;h2 id=&quot;from-my-perspective&quot;&gt;From my perspective&lt;/h2&gt;

&lt;p&gt;这一部分，我想以我一个大学生的态度来谈谈看法。&lt;/p&gt;

&lt;p&gt;正好我是计算机专业的学生，很多术语恰好能够比较形象的描述这个问题。简单来说，就像单进程和多进程一样。多进程的上下文切换如同我们的预热期，多进程对性能的提升并不是随着进程数量的增加而无限放大的，因为到最后进程切换占据了绝大部分的时间。我们的计算能力远逊于电脑，头脑也没有寄存器一般精确，因此稍有上下文切换，就会耗费大量的精力，这也就是大量程序员反感突然开会的原因。&lt;/p&gt;

&lt;p&gt;再来看javascript怎么工作的。javascript是严格单线程执行的语言，使用异步调用来模拟并发的任务。具体来说即是一个耗时的工作（如图片下载）并不马上执行，而是等密集的CPU工作结束后在执行，执行完毕后调用特定的函数通知用户。这样，会给人一种错觉，即浏览器在请求资源的同时仍然在跑其他代码。这与我们通常的工作模式有出入，毕竟我们不能随意推迟工作，然而这样的工作模式可以给我们一些启发。&lt;/p&gt;

&lt;p&gt;还有另一个现象我想提一提，大学之前，我很少碰日历软件，甚至没有理解其存在的理由。现在想起来，真是之前的工作环境太理想了，不仅再教室里很少有其他事情干扰，说实话，除了刷刷题之外也没有什么值得操心的事情。现在，即便是随意的一个念头，比如一个js库是否有更好的替代品，在寻找答案的过程中，往往因为看到其他关键词而产生无数个其他的念头，引发一系列连锁效应。如同一只深搜的指针，明明答案就在隔壁，却一意孤行的跑向深处。因此，类似的工具确实非常有必要的。Mac自带的日历我用了大概半个学期左右，现在再学习使用OmniFocus，这是一个十分强大的工具，我还没有使用熟练。&lt;/p&gt;

&lt;p&gt;当然，践行GTD的确需要工具的支持，这些细节我以后会仔细讨论。&lt;/p&gt;

&lt;p&gt;嘛，总之第一篇读后感到此结束，这是一个很有意思的主题，希望更多的人能够了解它。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;David Allen. &lt;em&gt;Getting Things Done, The Art of Stress-Free Productivity&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/GTD-First-Impression/&quot;&gt;GTD - The First Impression&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on January 27, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The Isla Del Sueño Migrant Boats]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/the-isla-del-sueno-migrant-boats/" />
  <id>http://hacker-yhj.github.io/the-isla-del-sueno-migrant-boats</id>
  <published>2013-12-11T00:00:00+00:00</published>
  <updated>2013-12-11T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;The second assignment stroke, inside I provided a powerful tool to explore the dataset of a migrant event. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/projects/vis_course_assignment_3/index.html&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/assignment3/frontCover.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Migrant Visualization&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Hope you will like it~&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;link-button&quot;&gt;&lt;a href=&quot;http://hacker-yhj.github.io/projects/vis_course_assignment_3/index.html&quot; class=&quot;btn&quot;&gt;Click to see the contents.&lt;/a&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/the-isla-del-sueno-migrant-boats/&quot;&gt;The Isla Del Sueño Migrant Boats&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on December 11, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[News Visualization Sketch]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/news-visualization-sketch/" />
  <id>http://hacker-yhj.github.io/news-visualization-sketch</id>
  <published>2013-12-11T00:00:00+00:00</published>
  <updated>2013-12-11T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Boss gave us one week to do a news visualization sketch, but he forgot it himself. It is a little upset to throw it into trash, so I put it here.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://hacker-yhj.github.io/images/news_visualization/vis_design.png&quot; alt=&quot;&quot; /&gt;
    &lt;figcaption&gt;News Visualization&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Hope you enjoy it.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/news-visualization-sketch/&quot;&gt;News Visualization Sketch&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on December 11, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Airline Visualization]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/vis-course-assignment/" />
  <id>http://hacker-yhj.github.io/vis-course-assignment</id>
  <published>2013-11-03T00:00:00+00:00</published>
  <updated>2013-11-03T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This is an assignment for visualization course, inside I gave out a quantitative relationship of airelines of the world. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/projects/vis_course_assignment/index.html&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/assignment2/frontCover.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Airline visualization&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Hope you will like it~&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;link-button&quot;&gt;&lt;a href=&quot;http://hacker-yhj.github.io/projects/vis_course_assignment/index.html&quot; class=&quot;btn&quot;&gt;Click to see the contents.&lt;/a&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/vis-course-assignment/&quot;&gt;Airline Visualization&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on November 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Use MacRuby for the first time]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/bilibili-rss-receiver-first-ruby-project/" />
  <id>http://hacker-yhj.github.io/bilibili-rss-receiver-first-ruby-project</id>
  <published>2013-10-16T00:00:00+00:00</published>
  <updated>2013-10-16T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Just now I finished the barely-running version of this little project, seriously using Ruby(actually MacRuby, I will mention it later) for the first time. &lt;/p&gt;

&lt;p&gt;Althrough I fell in love with Ruby the first time I saw it, I didn’t realize that writting with Ruby is such a pleasure. A GUI program using multithread tech and carefully handling exceptions is written in only 200+ lines, which seems impossible to Objective-C(I should have used it if I didn’t see MacRuby). Before talking about the details, I remind you that the project is avaliable in my github &lt;a href=&quot;https://github.com/Hacker-YHJ/miscellaneous/tree/master/BiliRSS&quot;&gt;repo&lt;/a&gt;. Feel free to give me some &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#106;&amp;#115;&amp;#099;&amp;#110;&amp;#109;&amp;#049;&amp;#057;&amp;#057;&amp;#051;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;feedbacks&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;macruby-is-a-awesome-hack&quot;&gt;MacRuby is a awesome hack&lt;/h2&gt;

&lt;p&gt;As we all know the most common language used to develop on Mac is Objective-C, besieds C and C++ also have a seat. MacRuby is a interface allowing you to use Ruby instead, which is a boon to Ruby lovers like me. If you don’t know the difference, I’m gonna tell you now.&lt;/p&gt;

&lt;p&gt;In my project I must handle six checkboxs. And now, for example, I need to hide them. What should I do?&lt;/p&gt;

&lt;p&gt;In Objective-C, the code may look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs0&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs2&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs3&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs4&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs5&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, a little bit stupid. Why not using the loop statement. Actually I can’t if the six checkboxs named like this, I mean six variables with similar name. To do this, I must use array.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks better now, but here comes anthoer problem. The variables and corresponding GUI components are bundled together, which can be done easily by some dragging tricks, but only when the variable is individually and explicitly defined. Variables within an array can not be recognized by the IDE in this specific case. If you really want to archieve this, you can, by editing the tedious XML files by hand and you won’t like that.&lt;/p&gt;

&lt;p&gt;Now Let’s see how Ruby solves this problem.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;instance_variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/checkbox/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkboxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;instance_eval&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;.setHidden true&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It needs six lines, the same as objective-c, but you can see that there is no repeated statement. I’m gonna give a detailed explaination of it. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;instance_variables&lt;/code&gt; are actually a function which returns an array of instance variables of this class. you may think that it is just a method, but actually you are facing the most flexible part of Ruby – metaprogramming. The method returns the inner content of a class in runtime, which is impossible in static programming languages like C. Now with this method, I have an array of all the variables including the checkboxs&lt;/p&gt;

&lt;p&gt;Statements between &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, called code block, are a little trick in Ruby acting like iteration. With &lt;code&gt;each&lt;/code&gt; method we know that for each variables, it will be assigned to &lt;code&gt;checkboxs&lt;/code&gt;, which is a local variable, and run the following code. Actually code block is a different kind of function, called repeatedly and with specific arugments, which can make code cleaner and more readable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;next if nil == (/checkbox/ =~ checkboxs)&lt;/code&gt; is nothing but a if statement with &lt;code&gt;if&lt;/code&gt; behind. Content within &lt;code&gt;/&lt;/code&gt; are regular expression, with the samplest form of it, matches any string containing “checkbox”. &lt;code&gt;next&lt;/code&gt; just like &lt;code&gt;continue&lt;/code&gt;, means start the next step of iteration. So this line choose all the variable with “checkbox” in its name. In our example, they are checkbox0 et al.&lt;/p&gt;

&lt;p&gt;So, you may think that we will call the &lt;code&gt;setHidden&lt;/code&gt; method with each checkbox. Yes, but more complicated.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;instance_eval&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkboxs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;.setHidden true&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;instance_eval&lt;/code&gt; is such a method that tells ruby interpreter to run the argument string as ruby source code. It is a powerful but dangerous method. Running the code generated in the runtime cann’t guarantee security, but brings a lot of flexibility. Security is a huge issue, so I will not go any deeper here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%{}&lt;/code&gt; is nothing but &lt;code&gt;&quot; &quot;&lt;/code&gt; expression, but it is able to use “ freely in the block. &lt;code&gt;#{}&lt;/code&gt; let the inner content “pop out”, means that in the string, the variable in the &lt;code&gt;#{}&lt;/code&gt; block will be shown as its value in the string form (implicit call the to_s function which returns a descriptive string of an object). So the string will be like &lt;code&gt;checkbox0.setHidden true&lt;/code&gt; et al.&lt;/p&gt;

&lt;p&gt;Now you can see the difference. If we have 100 checkboxs, we need 100 verbose lines in objective-c but still 6 lines in ruby, because the six lines will select all the variables and call the function with it.&lt;/p&gt;

&lt;h2 id=&quot;more-about-metaprogramming&quot;&gt;More about metaprogramming&lt;/h2&gt;

&lt;p&gt;I showed some ruby tricks of metaprogramming but it is just a drop in the ocean. Ruby allows you to do everything about the programme itself, like querying for the name of variables before, and more over, define a new method if you like.&lt;/p&gt;

&lt;p&gt;In the project, I still have to write about six functions, or methods, to be the handler of the checkboxs. The functions must be explicitly defined for the same reason as before. Since the content of the functions are so similar and I have zero tolerance in repeating, I’ve come up with a way using metaprogramming again.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkbox0_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkbox1_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkbox2_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkbox3_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkbox4_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkbox5_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GROUP_NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;      def checkbox&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;_handler(sender)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;        if sender.state == NSOnState&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;          @category_list &amp;lt;&amp;lt; sender.title&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;          refresh_textfield&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;          @label.setStringValue &amp;quot;Successfully added &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\#&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{sender.title}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;        elsif sender.state == NSOffState&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;          @category_list.delete sender.title&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;          refresh_textfield&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;          @label.setStringValue &amp;quot;Successfully deleted &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\#&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{sender.title}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;        end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;      end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What I’ve done is very clear. Define six empty functions to let the IDE know. Then do a loop statement to open each function and give them the corresponding content.&lt;/p&gt;

&lt;p&gt;Open the function? I’ve never heard of it when I’m using C, but it is such an easy thing in ruby. Just define the function again, the interpreter will notice there has been a synonym function, so it open the funcion instead of giving a definition. Everything you do within the definition statements will be add to the function. So easy~&lt;/p&gt;

&lt;p&gt;The code is similar to the former one so I skip the description. If you really like it, how about starting a ruby project now?&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It is just a exercise project, but I did feel the power of ruby and I really love it. It brought me a lot of pleasures and surprises when coding and gave out the decent result as well. People who have never touched interpreted language should try to use it. And you will never regret.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/bilibili-rss-receiver-first-ruby-project/&quot;&gt;Use MacRuby for the first time&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on October 16, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A visualisation example -- Histroy Flow]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/history-flow/" />
  <id>http://hacker-yhj.github.io/history-flow</id>
  <published>2013-10-04T00:00:00+00:00</published>
  <updated>2013-10-04T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;In 2003, just two years after the online encyclopedia’s birth, Wikipedia was still not well known, and among those aware of it there was serious skepticism about its open authorship model. Researcher Martin Wattenberg and Fernanda Viégas felt some of this skepticism themselves, yet many of the articles were interesting and helpful. To find out how was such a haphazard process yielding a quality product and other related questions, they decided to investigate. They did a lot of works and most of them are masterpieces. I’ll focus mainly on the History Flow part which I think is beautiful and useful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;about-the-data&quot;&gt;About the Data&lt;/h2&gt;

&lt;p&gt;To get start, they need the raw data of Wikipedia. Fortunately, Wikipedia’s data wasn’t a table of numbers in a database, but a set of document versions and edit histories. Actually, Wikipedia keeps a full version history of every page available to the public, which is one of the initial brilliant decisions by Wikipedia’s founders and undoubtedly a boon for researchers .&lt;/p&gt;

&lt;p&gt;The data they appreciated are the edit history, from which we can have an overview of the articles in each version and trace the changes. Thus can perhaps find out the reason of the Wikipedia is of such a high quality and other questions.&lt;/p&gt;

&lt;h2 id=&quot;visual-design&quot;&gt;Visual Design&lt;/h2&gt;

&lt;p&gt;I have to say that Wattenberg and Viégas had done a great work. The whole visual design is simple and clear, but still contains everything inside–contents, versions and authors displayed in a especially proper way. The figure below is the main panel of the History Flow.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images//history_flow/main_panel.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images//history_flow/main_panel.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Main Panel&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What you see in the middle part is the history flow diagram, the core part which we may discuss later in detail. The right part is a panel showing the content of a specific article in a specific version, with different colors representing different contributors. The author list is placed in the left shown as a column, with selected one highlighted. Upper panel is some options about color and spacing of the diagram. The figure may be a little bit vague, but you can still notice that the now selected article is titled “chocolate”, shown both in the upper left of the main panel and the beginning part of the content.&lt;/p&gt;

&lt;p&gt;Surely you can guess that the key part of the design is the diagram, and wondering what are these colored stripe means? Let’s find out.&lt;/p&gt;

&lt;p&gt;Imagine a scenario where three people will make contributions to a Wiki page at different points in time. Each person edits the page and then saves their changes to what becomes the latest version of that page.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;img src=&quot;http://hacker-yhj.github.io/images//history_flow/how_to_do_1.gif&quot; alt=&quot;&quot; /&gt;
    &lt;img src=&quot;http://hacker-yhj.github.io/images//history_flow/how_to_do_2.gif&quot; alt=&quot;&quot; /&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
    &lt;img src=&quot;http://hacker-yhj.github.io/images//history_flow/how_to_do_3.gif&quot; alt=&quot;&quot; /&gt;
    &lt;img src=&quot;http://hacker-yhj.github.io/images//history_flow/how_to_do_4.gif&quot; alt=&quot;&quot; /&gt;
    &lt;figcaption&gt;What&#39;s the meaning of the stripes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In figure 1, the vertical red line represents the first version of the document. Since Mary creates the page all of the contents in the page reflect her author color. The length of the line indicates the amount of text Mary has written.&lt;/p&gt;

&lt;p&gt;Suzanne adds some text to the end of Mary’s original entry; note that Suzanne’s blue line is appended to the end of Mary’s red line indicating that Suzanne’s text was added at the end of the page shown in figure 2. Suzanne saves her changes and this becomes the latest version of the page.&lt;/p&gt;

&lt;p&gt;Now in figure 3, Martin finds the original text too verbose; he deletes some of it and writes his own shorter version between the introductory text and Suzanne’s contribution.&lt;/p&gt;

&lt;p&gt;On version 4 Suzanne comes back and makes a small contribution in the middle of what remains of the introductory text.&lt;/p&gt;

&lt;p&gt;History Flow connects text that has been kept the same between consecutive versions; in other words, it connects corresponding segments on the lines representing versions. Pieces of text that do not have correspondence in the next (or previous) version are not connected and the user sees a resulting “gap” in the visualization; this happens for deletions and insertions.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images/history_flow/how_to_do_5.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/history_flow/how_to_do_5.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Final appearance&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now you can scroll up to see the main panel figure, isn’t it clear enough to you? You can easily click a version and the corresponding content will show in the right together with the version highlighted (see the main panel figure and you will find a brown highlighted line). And as you may guess, the color pattern of the content and the diagram stripe are the same of course, so that you can match them up.&lt;/p&gt;

&lt;h2 id=&quot;visual-mode&quot;&gt;Visual Mode&lt;/h2&gt;

&lt;p&gt;This works has more than one visual mode in order to satisfy different requires. To switch among them, just click the option panel in the upper part of the main panel (which mentioned before). Let’s have a quick look.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images/history_flow/community_view.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/history_flow/community_view.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Community View&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Community view&lt;/em&gt; is the default mode and it shows all contributions from different authors, hues to indicate the author of each sentence. In this view we use just one property of color – the hues. Of course we can easily add brightness to represent the ages of the text with brighter colors being more recent. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images/history_flow/individual_view.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/history_flow/individual_view.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Individual View&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Individual author view&lt;/em&gt; highlights the contributions of a single author and it depicts the persistence of these contributions over time. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images/history_flow/recent_view.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/history_flow/recent_view.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Recent View&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Recent Changes View&lt;/em&gt; highlights the new content in each version of the Wiki page independent of authorship. This view allow us to see what portions of the text have been edited the most over time.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images/history_flow/age_view.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/history_flow/age_view.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Age View&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Age View&lt;/em&gt; this view has no colors representing authorship; instead, the focus is on the persistence of different contributions. A gray scale gradient goes from white (brand new contribution) to dark gray (very old contribution). As I mentioned before, this view can combine perfectly with the community view which will show more information and also bring more clutters. I suggest that use the combination in a small data set.&lt;/p&gt;

&lt;p&gt;Something else should be given a word is that the space between the version is customized. You can either make it constant so that you can find out what happens between two version, or make the space length in direct proportion of the time duration between, which may depict more clearly how the content changes with the time elapsing. To switch between, the upper right check box will help. This is surprisingly helpful in one of the result which we will discuss in the next section.&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;This great visualization bring out many decent results. We focus on the reason why there seems no vandalism in Wikipedia.&lt;/p&gt;

&lt;p&gt;Vandalism is some kind of behavior that delete or ruin all the work done before, which happens in many open authorship circumstances. Is there any vandalism in Wikipedia? The result says yes. Look at the figure below.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images/history_flow/abortion1.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/history_flow/abortion1.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Abortion 1&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is the diagram of the article “Abortion”. Notice that there are few vertical gaps in the whole diagram. As you may guess, that is a whole deletion behavior. But why didn’t we ever open up an empty page? We notice that it is spaced by a constant length, how about changing a spacing mode to find more?&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/images/history_flow/abortion2.gif&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/history_flow/abortion2.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Abortion 2&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Above is the figure with “time spacing mode”. Seems that the gaps disappear? From the diagram, they are just refined so rapidly that you can’t even see it in the time spacing mode. So we didn’t see evidence of destructive behavior wasn’t that this behavior didn’t exist, but that it tended to be erased quickly from public view. This is a correct result, but is not so easily demonstrated. To get this result, the author did a lot of additional works. But it is undeniable that the figure is so intuitive that gives out a primary hypothesis and eventually lead to this result.&lt;/p&gt;

&lt;h2 id=&quot;my-favorite-part-pros-and-cons&quot;&gt;My Favorite Part, Pros and Cons&lt;/h2&gt;

&lt;p&gt;My favorite part is the diagram part of course. The first time I saw it I was deeply attracted, while confusions stroke me at the same time. &lt;/p&gt;

&lt;p&gt;The primary confusion is why it is so redundant. I mean it is fully adequate to encode all the information without the stripes, only with the vertical lines. Then when data set grows larger, I realize that everything became spoiled without the stripes. Lines are so thin in the screen that you have to zoom in to watch the details, but to do so, you will miss the whole view of the flow. Moreover, without the stripe I can only focus on the constituent components of a single version, or changes between two adjacent version at most, let alone the contributions of a specific author through time. The stripe use additional area to show the information, strengthening the differences of changes, and most importantly, penetrating the whole version, making the hiding information, the cooperations and conflicts between authors for example, jump out of the screen. This is really a genius hack.&lt;/p&gt;

&lt;p&gt;Despite the above, the diagram has some very good features. Colors are smartly handled, with hues discrete encoding and brightness consecutive encoding, which is proper for human perception. Changeable spacing and diverse views added extra usability. Especially the individual author view, which should be the honor badge of contributors for their long-lasting devotions.&lt;/p&gt;

&lt;p&gt;By the way I was interested in the zigzag part of the “chocolate” article shown in the very beginning (the main panel figure). From the diagram, there are repeatedly insertion and deletion behaviors, which seems like two people quarreling and fighting each other. Actually the fact is so close to my imagination: two users fought over whether a kind of chocolate sculpture called “coulage” really existed and consequently, whether or not the paragraph about it should appear on the page. Interesting isn’t it! Such a small conflict draws such a apparent pattern in the diagram, which definitely give out inspirations for further research.&lt;/p&gt;

&lt;h2 id=&quot;advice-for-improvement&quot;&gt;Advice for Improvement&lt;/h2&gt;

&lt;p&gt;There are three main points I want to mention about. &lt;/p&gt;

&lt;p&gt;The first point is about zooming. Zooming should be the fundamental function in any visual design, while I didn’t find any description about it in this design. Maybe it is such a intrinsic part of visualization that the author just omitted the description. But if there aren’t, there should be.&lt;/p&gt;

&lt;p&gt;The rest is all about colors. Since each color matches an author, there may be some clutters in the case of large-scale cooperation. Notice that not all the author appear at the same time, I mean, some authors were active in the former versions and others in the latter, while only few of them really went through all the versions. Can we just use the same color for different authors in the situation where they won’t shadow each other. It may cause some information lost but maybe a good idea, especially when a lot of authors are working on an article together.&lt;/p&gt;

&lt;p&gt;If you look carefully at the figure of “abortion” above (in page 6), you can see the gaps in the right. Actually the middle right part is not a real gap, it is a stripe with it’s brightness nearly zero because it matches up a piece of long-lasting content from the article and brightness is used to encode the duration. Longer lasting Content become darker, but shouldn’t be so close to black. It is confusing of course, we can just give it a threshold to keep it a proper brightness, so that we won’t make mistakes.&lt;/p&gt;

&lt;p&gt;Improvement will not have an end though, I’ll just stop here. Beyond all the above, I really appreciate this work. It brought inspiration both in visual design and in pattern analysis to me, which definitely boraden my eyesight and deepen my interests in visualization research.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;reference&lt;/h2&gt;
&lt;p&gt;Fernanda B. Viégas, Martin Wattenberg, Kushal Dave. Studying Cooperation and Conflict between Authors with history flow Visualizations in proceedings of conference on human factors in computer system, 2004. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.research.ibm.com/visual/projects/history_flow&quot;&gt;http://www.research.ibm.com/visual/projects/history_flow&lt;/a&gt; This is the project pages. Detailed information, news and more figures are available there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bewitched.com/historyflow.html&quot;&gt;http://www.bewitched.com/historyflow.html&lt;/a&gt; This is the Martin Wattenberg’s pages about this project. His descriptions about this and other interesting works are available there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fernandaviegas.com/wikipedia.html&quot;&gt;http://www.fernandaviegas.com/wikipedia.html&lt;/a&gt; This is the another author, Fernanda Viégas’s pages about this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beautiful Visualization, Looking at Data Through the Eyes of Experts&lt;/strong&gt; This is the book where I met and select this visualization. In this book are lots of high quality visualizations with specific descriptions and discussions. I strongly recommend you to read about it.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/history-flow/&quot;&gt;A visualisation example -- Histroy Flow&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on October 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quadratic Curve]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/quadratic-curve/" />
  <id>http://hacker-yhj.github.io/quadratic-curve</id>
  <published>2013-09-05T00:00:00+00:00</published>
  <updated>2013-09-05T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Quadratic curve is also called conic section obtained as the intersection of a cone (more precisely, a right circular conical surface) with a plane. &lt;/p&gt;

&lt;p&gt;Conic sections are exactly those curves that, for a point F (in black), a line L (also in black) not containing F and a non-negative number e, are the locus of points whose distance to F equals e times their distance to L. F is called the focus, L the directrix, and e the eccentricity. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/projects/quadratic_curve/index.html&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/quadratic/frontCover.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Quadratic curve&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!--more--&gt;

&lt;div class=&quot;link-button&quot;&gt;&lt;a href=&quot;http://hacker-yhj.github.io/projects/quadratic_curve/index.html&quot; class=&quot;btn&quot;&gt;Click to see the contents.&lt;/a&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/quadratic-curve/&quot;&gt;Quadratic Curve&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on September 05, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Circle Play]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/picture-simulator/" />
  <id>http://hacker-yhj.github.io/picture-simulator</id>
  <published>2013-09-05T00:00:00+00:00</published>
  <updated>2013-09-05T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This is a just-for-fun page. Drag a picture in the box and a circle will pop out. Move your cursor above it and see the magic. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/projects/PicShow/index.html&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/picshow/frontCover.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Just for fun!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!--more--&gt;

&lt;div class=&quot;link-button&quot;&gt;&lt;a href=&quot;http://hacker-yhj.github.io/projects/PicShow/index.html&quot; class=&quot;btn&quot;&gt;Click to see the contents.&lt;/a&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/picture-simulator/&quot;&gt;Circle Play&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on September 05, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[What's happening when you use "Pen" tool in Photoshop]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/bezier-curves/" />
  <id>http://hacker-yhj.github.io/bezier-curves</id>
  <published>2013-09-05T00:00:00+00:00</published>
  <updated>2013-09-05T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Actually the “Pen” tool in Photoshop draws a Bézier curve on the screen. Moreover, all the curve that “Pen” tool generated is second-ordered, that means it use two anchors and at most four control points.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://hacker-yhj.github.io/projects/Bézier_Curves/index.html&quot;&gt;&lt;img src=&quot;http://hacker-yhj.github.io/images/bézier/frontCover.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Bézier curve&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!--more--&gt;

&lt;div class=&quot;link-button&quot;&gt;&lt;a href=&quot;http://hacker-yhj.github.io/projects/Bézier_Curves/index.html&quot; class=&quot;btn&quot;&gt;Click to see the contents.&lt;/a&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/bezier-curves/&quot;&gt;What's happening when you use "Pen" tool in Photoshop&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on September 05, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[How to build a blog with Octopress]]></title>
 <link rel="alternate" type="text/html" href="http://hacker-yhj.github.io/how-to-build-a-blog-with-octopress/" />
  <id>http://hacker-yhj.github.io/how-to-build-a-blog-with-octopress</id>
  <published>2013-09-04T00:00:00+00:00</published>
  <updated>2013-09-04T00:00:00+00:00</updated>
  <author>
    <name>Thomas Yang</name>
    <uri>http://hacker-yhj.github.io</uri>
    <email>jscnm1993@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;经过了好些时间的奋战，好说歹说是把这个迷你的博客搭起来了。虽然网上有无数教程，但是由于平台差异，还是遇到了非常多的麻烦，（坑爹呢这是！( ╯#-_-)╯┴—┴ ）。嘛，技术宅的道路任重道远，动心忍性啊。总之，侯门一入深似海，喝水不忘挖井人，第一篇blog顺理成章写一段小教程吧，希望能帮到各位想要个免费的小小的博客的朋友。&lt;/p&gt;

&lt;h2 id=&quot;octopress&quot;&gt;Octopress&lt;/h2&gt;

&lt;h3 id=&quot;octopress-1&quot;&gt;Octopress简介&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;是一个用&lt;code&gt;ruby&lt;/code&gt;写成的基于&lt;a href=&quot;github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;架构的静态博客框架。具体介绍官网比我清楚，在此我只说说个人感受。&lt;/p&gt;

&lt;p&gt;首先要说的肯定是平台的事儿。（再掀一次！( ╯#-_-)╯┴—┴ ）因为会用到很多依赖，比如ruby，这就牵扯到版本控制，Linux下有rvm或者rbenv等等成熟的版本控制程序；比如之后的发布要用到git，语法高亮要用到python等等。总之，用Linux会方便很多很多。某Windows，唉……在此抹一把辛酸泪，我容易吗我T T。顺便在此感谢淘宝做的国内&lt;a href=&quot;http://ruby.taobao.org/&quot;&gt;RubyGem镜像&lt;/a&gt;，我觉得这是对国内开发人员最直接的鼓励和某些行径最直接的打脸。&lt;/p&gt;

&lt;p&gt;其次就是需要掌握的知识了。就像是官网介绍上写的一样：Octopress， A blogging framework for hackers.这是一个黑客用的框架，而一个黑客必须是博学的。我本人仅仅粗浅的接触了一下就已经涉及到很多知识了。如ruby和配套的rakefile，发布需要学习git，修改配置文件涉及到yml以及html等等相关语法，写博客需要使用markdown语法。当然，这些是不需要十分精通也可以使用的，因此也无需因为这些就打退堂鼓。&lt;/p&gt;

&lt;p&gt;然后，Octopress繁多的依赖决定了其准备步骤繁杂，如果换一台电脑，会花相当（嘛，其实也没多少，只是比其他框架多一些吧~）的时间在准备依赖项上面。而且，由于是静态博客，每次生成都会重写所有Page，加之ruby的速度限制，因此在博客数量繁多的时候生成会相当慢。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;octopress-2&quot;&gt;本机安装Octopress&lt;/h3&gt;

&lt;p&gt;好，既然决定要进坑，那么这就开始吧。&lt;/p&gt;

&lt;h4 id=&quot;git&quot;&gt;安装git&lt;/h4&gt;

&lt;p&gt;网页要托管在github page上就免不了使用git。（为啥非要托管在github，因为它免费！）这个真心不是坑，强烈推荐大家使用版本控制系统，熟悉之后你就知道这东西的方便了。
git的下载地址在&lt;a href=&quot;https://github.com&quot;&gt;github官网&lt;/a&gt;上。github上非常贴心的有git的入门教程，推荐大家看一下。&lt;/p&gt;

&lt;h4 id=&quot;ruby&quot;&gt;安装Ruby&lt;/h4&gt;

&lt;p&gt;在linux上好说，下一个rvm万事大吉。&lt;/p&gt;

&lt;p&gt;在windows上这是个麻烦事儿，因为windows没有方便的ruby版本管理系统，得到官网上去下载对应的版，也可以通过以上淘宝的国内镜像链接下载。&lt;/p&gt;

&lt;p&gt;装好ruby之后记得查看版本。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;确定版本与Octopress网站上需要的版本一致。（我现在用的是1.9.3）
另外，现在版本的ruby都是附带gem的，如果想手动下载，可以参考&lt;a href=&quot;http://rubygems.org/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;devkitwindows-only&quot;&gt;下载与配置Devkit（Windows only）&lt;/h4&gt;

&lt;p&gt;下一个问题又是为难我windows用户的。（我感到了世界满满的恶意= =）由于Octopress处理的时候需要C编译环境，我们得装一个叫&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;Devkit&lt;/a&gt;的东西。进入下载地址选择相应的版本下载，之后解压到合适的目录。下一步进入目录，修改config.yml，向其中加入ruby的目录。（加到最后一行就行啦）然后输入指令&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby dk.rb init
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby dk.rb install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样就配置好了Devkit。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;更改本地环境配置&lt;/h4&gt;

&lt;p&gt;亲爱的windows用户，你又有麻烦了。为了支持中文UTF-8，我们得把windows环境变量改一改。加入&lt;code&gt;LANG=zh_CN.UTF-8&lt;/code&gt;和&lt;code&gt;LC_ALL=zh_CN.UTF-8&lt;/code&gt;即可。&lt;/p&gt;

&lt;h4 id=&quot;octopress-3&quot;&gt;下载与配置Octopress&lt;/h4&gt;

&lt;p&gt;Octopress目前托管在github上。（你看，又是github）&lt;/p&gt;

&lt;p&gt;有了git之后我们打开命令行，在一个合适的位置将Octopress clone下来，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/imathis/octopress.git Octopress&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;之后，由于国内某些见不得人的原因，我们需要改一改gem的更新源。运行&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem sources -a http://ruby.taobao.org/
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem sources -r http://rubygems.org/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Octopress里的配置文件也得改。进入Octopress目录，打开Gemfile，将source改为&lt;code&gt;http://ruby.taobao.org/&lt;/code&gt;即可。&lt;/p&gt;

&lt;p&gt;接下来配置Octopress。（一键傻瓜式配置~~）在Octopress目录下运行&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果&lt;code&gt;rake&lt;/code&gt;报错，试试&lt;code&gt;bundle exec rake install&lt;/code&gt;。这是因为rake所需版本和现存版本不一致造成的。出现类似的问题都可以如此解决。
好的，如果顺利的到达这里，我们已经成功一半了。&lt;/p&gt;

&lt;h2 id=&quot;github-page&quot;&gt;Github Page&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;是一个公共的免费网页托管服务。任何人都可以非常方便的在上面发布静态网页，并且用Git控制，十分便利。不过需要注意的是不要把过于隐私的东西发布到上面，因为公共的，别人可以轻易clone下来。我们所要做的就是在这上面，将我们本地生成的静态网站挂载上去。&lt;/p&gt;

&lt;h3 id=&quot;repo&quot;&gt;创建一个repo&lt;/h3&gt;

&lt;p&gt;首先需要一个Github账号，简单的注册一个就好。&lt;/p&gt;

&lt;p&gt;然后新建一个repo，名称需要是&lt;code&gt;username.github.com&lt;/code&gt;，username是本人的账号，代表这是你的个人主页。&lt;/p&gt;

&lt;p&gt;之后进入Octopress，输入：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake setup_github_pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;程序会提示输入网址，这时候按照他的提示输入即可。之后输入：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake install
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake depoly&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不出意外，稍等一会儿，就可以在名为username.github.com的网站上看到你的博客了。&lt;/p&gt;

&lt;p&gt;大功告成，可喜可贺。撒花撒花~~&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;发表博文&lt;/h2&gt;

&lt;p&gt;搭建好Octopress之后，你能够看到默认的欢迎页。当然，里面是空空如也的。赶快动手写一篇博文吧。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake new_post&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;只需这样一句简单的指令，Octopress会在&lt;code&gt;/source/_posts/&lt;/code&gt;下生成一篇相应的markdown文件，编辑该文件即可发表博文了。
之后输入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake generate
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake preview&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可在本地端口4000预览生成的博客。确认无误后记得&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake depoly&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上传到github上。&lt;/p&gt;

&lt;p&gt;更多的操作和指令在Octopress根目录下得Rakefile中。稍懂ruby的同学应该都能看明白。在此就不啰嗦了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;杂谈&lt;/h2&gt;

&lt;p&gt;LZ我还是一只ruby新手，但是我认为任何成熟的，由ruby写出来的框架的代码都是值得一读的。大名鼎鼎的&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;自不必说，它已然成为了ruby书写的框架的典范了。而Octopress的代码，我认为，也是非常有学习的价值的，热爱ruby的同学一定抽点时间来好好看一看。&lt;/p&gt;

&lt;p&gt;另，Octopress十分强大，许多的特性LZ还没有搞明白，日后有时间研究清楚了一定会更新的。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://hacker-yhj.github.io/how-to-build-a-blog-with-octopress/&quot;&gt;How to build a blog with Octopress&lt;/a&gt; was originally published by Thomas Yang at &lt;a href=&quot;http://hacker-yhj.github.io&quot;&gt;Hacking to the Gate&lt;/a&gt; on September 04, 2013.&lt;/p&gt;</content>
</entry>

</feed>
